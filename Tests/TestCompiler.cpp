#include "QLibPCH.h"
#include "Tests.h"
#include "Instructions.h"

#include "../Library/Common/Chunk.h"
#include "../Library/Compiler/Compiler.h"

using namespace Tests;
using namespace Compiler;

bool Tests::TestCompiler()
{
	UTEST_BEGIN( "Compiler Tests" );

	UTEST_CASE( "Generate simple bytecode" )
	{
		auto chunk = QScript::Compile( "return 2 + 2;" );

		/*
			LOAD 2.0
			LOAD 2.0
			ADD
			RETN
		*/

		UTEST_ASSERT( chunk->m_Code.size() >= 6 );
		UTEST_ASSERT( chunk->m_Code[ 0 ] == QScript::OpCode::OP_LD_SHORT );
		UTEST_ASSERT( chunk->m_Code[ 2 ] == QScript::OpCode::OP_LD_SHORT );
		UTEST_ASSERT( chunk->m_Code[ 4 ] == QScript::OpCode::OP_ADD );
		UTEST_ASSERT( chunk->m_Code[ 5 ] == QScript::OpCode::OP_RETN );

		QScript::FreeChunk( chunk );
		UTEST_CASE_CLOSED();
	}( );

	UTEST_CASE( "Handle multiple exceptions" )
	{
		UTEST_THROW_EXCEPTION( QScript::Compile( "2 / / ; 2 / /; 2 / /;" ),
			const std::vector< CompilerException >& e,
			e.size() == 3 && e[ 0 ].id() == std::string( "ir_expect_lvalue_or_statement" )
				&& e[ 1 ].id() == std::string( "ir_expect_lvalue_or_statement" )
				&& e[ 2 ].id() == std::string( "ir_expect_lvalue_or_statement" ) );

		UTEST_CASE_CLOSED();
	}( );

	UTEST_CASE( "Compile > 255 constants" )
	{
		auto chunk = QScript::Compile( "0.00;											\
			1.00;2.00;3.00;4.00;5.00;6.00;7.00;8.00;9.00;10.00;							\
			11.00;12.00;13.00;14.00;15.00;16.00;17.00;18.00;19.00;20.00;				\
			21.00;22.00;23.00;24.00;25.00;26.00;27.00;28.00;29.00;30.00;				\
			31.00;32.00;33.00;34.00;35.00;36.00;37.00;38.00;39.00;40.00;				\
			41.00;42.00;43.00;44.00;45.00;46.00;47.00;48.00;49.00;50.00;				\
			51.00;52.00;53.00;54.00;55.00;56.00;57.00;58.00;59.00;60.00;				\
			61.00;62.00;63.00;64.00;65.00;66.00;67.00;68.00;69.00;70.00;				\
			71.00;72.00;73.00;74.00;75.00;76.00;77.00;78.00;79.00;80.00;				\
			81.00;82.00;83.00;84.00;85.00;86.00;87.00;88.00;89.00;90.00;				\
			91.00;92.00;93.00;94.00;95.00;96.00;97.00;98.00;99.00;100.00;				\
			101.00;102.00;103.00;104.00;105.00;106.00;107.00;108.00;109.00;110.00;		\
			111.00;112.00;113.00;114.00;115.00;116.00;117.00;118.00;119.00;120.00;		\
			121.00;122.00;123.00;124.00;125.00;126.00;127.00;128.00;129.00;130.00;		\
			131.00;132.00;133.00;134.00;135.00;136.00;137.00;138.00;139.00;140.00;		\
			141.00;142.00;143.00;144.00;145.00;146.00;147.00;148.00;149.00;150.00;		\
			151.00;152.00;153.00;154.00;155.00;156.00;157.00;158.00;159.00;160.00;		\
			161.00;162.00;163.00;164.00;165.00;166.00;167.00;168.00;169.00;170.00;		\
			171.00;172.00;173.00;174.00;175.00;176.00;177.00;178.00;179.00;180.00;		\
			181.00;182.00;183.00;184.00;185.00;186.00;187.00;188.00;189.00;190.00;		\
			191.00;192.00;193.00;194.00;195.00;196.00;197.00;198.00;199.00;200.00;		\
			201.00;202.00;203.00;204.00;205.00;206.00;207.00;208.00;209.00;210.00;		\
			211.00;212.00;213.00;214.00;215.00;216.00;217.00;218.00;219.00;220.00;		\
			221.00;222.00;223.00;224.00;225.00;226.00;227.00;228.00;229.00;230.00;		\
			231.00;232.00;233.00;234.00;235.00;236.00;237.00;238.00;239.00;240.00;		\
			241.00;242.00;243.00;244.00;245.00;246.00;247.00;248.00;249.00;250.00;		\
			251.00;252.00;253.00;254.00;255.00;256.00;257.00;258.00;259.00;260.00;		\
			261.00;262.00;263.00;264.00;265.00;266.00;267.00;268.00;269.00;270.00;		\
			271.00;272.00;273.00;274.00;275.00;276.00;277.00;278.00;279.00;280.00;		\
			281.00;282.00;283.00;284.00;285.00;286.00;287.00;288.00;289.00;290.00;		\
			291.00;292.00;293.00;294.00;295.00;296.00;297.00;298.00;299.00;300.00;		\
			301.00;302.00;303.00;304.00;305.00;306.00;307.00;308.00;309.00;310.00;		\
			311.00;312.00;313.00;314.00;315.00;316.00;317.00;318.00;319.00;320.00;		\
			321.00;322.00;323.00;324.00;325.00;326.00;327.00;328.00;329.00;330.00;		\
			331.00;332.00;333.00;334.00;335.00;336.00;337.00;338.00;339.00;340.00;		\
			341.00;342.00;343.00;344.00;345.00;346.00;347.00;348.00;349.00;350.00;		\
			351.00;352.00;353.00;354.00;355.00;356.00;357.00;358.00;359.00;360.00;		\
			361.00;362.00;363.00;364.00;365.00;366.00;367.00;368.00;369.00;370.00;		\
			371.00;372.00;373.00;374.00;375.00;376.00;377.00;378.00;379.00;380.00;		\
			381.00;382.00;383.00;384.00;385.00;386.00;387.00;388.00;389.00;390.00;		\
			391.00;392.00;393.00;394.00;395.00;396.00;397.00;398.00;399.00;400.00;		\
			401.00;402.00;403.00;404.00;405.00;406.00;407.00;408.00;409.00;410.00;		\
			411.00;412.00;413.00;414.00;415.00;416.00;417.00;418.00;419.00;420.00;		\
			421.00;422.00;423.00;424.00;425.00;426.00;427.00;428.00;429.00;430.00;		\
			431.00;432.00;433.00;434.00;435.00;436.00;437.00;438.00;439.00;440.00;		\
			441.00;442.00;443.00;444.00;445.00;446.00;447.00;448.00;449.00;450.00;		\
			451.00;452.00;453.00;454.00;455.00;456.00;457.00;458.00;459.00;460.00;		\
			461.00;462.00;463.00;464.00;465.00;466.00;467.00;468.00;469.00;470.00;		\
			471.00;472.00;473.00;474.00;475.00;476.00;477.00;478.00;479.00;480.00;		\
			481.00;482.00;483.00;484.00;485.00;486.00;487.00;488.00;489.00;490.00;		\
			491.00;492.00;493.00;494.00;495.00;496.00;497.00;498.00;499.00;500.00;		\
			501.00;502.00;503.00;504.00;505.00;506.00;507.00;508.00;509.00;510.00;		\
			511.00;" );

		UTEST_ASSERT( chunk->m_Constants.size() == 512 );

		/*
			Sequences of
			0000 OP_LOAD_SHORT
			0001 index
			0002 OP_POP
			...
			0000 OP_LOAD_LONG
			0001 index
			0002 index
			0003 index
			0004 index
			0005 OP_POP
		*/

		UTEST_ASSERT( chunk->m_Code[ 0 ] == QScript::OpCode::OP_LD_SHORT );
		UTEST_ASSERT( chunk->m_Code[ 1 ] == 0 );
		UTEST_ASSERT( chunk->m_Code[ 2 ] == QScript::OpCode::OP_POP );

		int firstLong = 255 * 3;
		UTEST_ASSERT( chunk->m_Code[ firstLong ] == QScript::OpCode::OP_LD_LONG );
		UTEST_ASSERT( chunk->m_Code[ firstLong + 5 ] == QScript::OpCode::OP_POP );

		QScript::FreeChunk( chunk );
		UTEST_CASE_CLOSED();
	}( );

	UTEST_END();
}
